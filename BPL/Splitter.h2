#ifndef Spliter
#define Spliter

#include <windows.h>
#define WC_CONTSPLITER	_T("ContSpliterClass")

class ContSpliter {
	protected:
	HWND W1, W2;
	int dwSplitterPos;
	bool horis, bSplitterMoving = false;
	byte width;
	HCURSOR hCur;
	ContSpliter(HWND Item, HWND Ch1, HWND Ch2, bool hor, byte width);
	static LRESULT CALLBACK static_Procedure(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
public:
	virtual void Resize(HWND hwnd, WPARAM wParam, LPARAM lParam);
	virtual void Move(HWND hwnd, WPARAM wParam, LPARAM lParam);
	
	static ContSpliter *New(HWND Item, HWND Ch1, HWND Ch2, bool hor, byte width = 4);
	static void Reg_Class(HINSTANCE hInst);
	static ContSpliter* GetObject(HWND Item);
};


ContSpliter*  ContSpliter::GetObject(HWND hwnd) {
	auto R = GetWindowLong(hwnd, GWL_USERDATA);
	return reinterpret_cast<ContSpliter*>(R);
}	// ---------------------------------------------------------------

void ContSpliter::Reg_Class(HINSTANCE hInst) {
	WNDCLASS C;
	if (GetClassInfo(hInst, WC_CONTSPLITER, &C)) return;
	WNDCLASSEX wcex = {0};
	wcex.cbSize = sizeof(WNDCLASSEX);
	wcex.lpfnWndProc = static_Procedure;
	wcex.hInstance = hInst;
	wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW);
	wcex.lpszClassName = WC_CONTSPLITER;
	_ASSERTE (RegisterClassEx(&wcex)!=0);
};	// ---------------------------------------------------------------

class ContSpliterProc : public ContSpliter {
	int inline DefSplitPos(RECT r) { return 50; };
public:
	void Resize(HWND hwnd, WPARAM wParam, LPARAM lParam);
	void Move(HWND hwnd, WPARAM wParam, LPARAM lParam);
	ContSpliterProc(HWND Item, HWND Ch1, HWND Ch2, bool hor, byte width);
	static ContSpliter *New(HWND Item, HWND Ch1, HWND Ch2, bool hor, byte width = 4, byte Defproc = 50);
};

//			ContSpliter <<<<<<<<<<<<<<<<<<<<<<<

ContSpliter* ContSpliter::New(HWND Item, HWND Ch1, HWND Ch2, bool hor, byte width) {
	return new ContSpliter(Item, Ch1, Ch2, hor, width);
}; // ---------------------------------------------------------------

ContSpliter::ContSpliter(HWND Item, HWND Ch1, HWND Ch2, bool hor, byte wid) {
	W1 = Ch1;
	W2 = Ch2;
	horis = hor;
	width = wid;
	auto s = SetWindowLong(Item, GWL_USERDATA, (LONG)this);
	s = GetWindowLong(Item, GWL_USERDATA);
	hCur = LoadCursor(NULL, hor ? IDC_SIZEWE : IDC_SIZENS);
	dwSplitterPos = 0;
	SetWindowLong(Item, GWL_WNDPROC, (LONG)&static_Procedure);
}; // ---------------------------------------------------------------

void ContSpliter::Move(HWND hwnd, WPARAM wParam, LPARAM lParam) {
	if ((horis ? LOWORD(lParam) : HIWORD(lParam)) > width * 2) {// do not allow above this mark
		SetCursor(hCur);
		if ((wParam == MK_LBUTTON) && bSplitterMoving)
		{
			RECT rect;
			GetClientRect(hwnd, &rect);
			if ((horis ? LOWORD(lParam) : HIWORD(lParam)) + width * 2 > (horis ? rect.right : rect.bottom))
				return;

			dwSplitterPos = (horis ? LOWORD(lParam) : HIWORD(lParam));
			Resize(hwnd, 1, MAKELPARAM(rect.right, rect.bottom));
		}
	}
};//---------------------------------------------------------------

void ContSpliter::Resize(HWND hwnd, WPARAM wParam, LPARAM lParam) {
	if (!dwSplitterPos) 
		dwSplitterPos = (horis ? LOWORD(lParam) : HIWORD(lParam)) / 2;

	if (horis) {
		if ((wParam != 1) && (LOWORD(lParam) < dwSplitterPos))
			dwSplitterPos = LOWORD(lParam) - width * 2;

		/* Adjust the children's size and position */
		HDWP hdwp = BeginDeferWindowPos(2);
		DeferWindowPos(hdwp, W1, nullptr, 0, 0, dwSplitterPos - 1, HIWORD(lParam), 0);
		DeferWindowPos(hdwp, W2, nullptr, dwSplitterPos + width, 0, LOWORD(lParam) - dwSplitterPos, HIWORD(lParam), 0);
		if (hdwp) EndDeferWindowPos(hdwp);
	}
	else {
		if ((wParam != 1) && (HIWORD(lParam) < dwSplitterPos))
			dwSplitterPos = HIWORD(lParam) - width * 2;

		/* Adjust the children's size and position */
		HDWP hdwp = BeginDeferWindowPos(2);
		DeferWindowPos(hdwp, W1, nullptr, 0, 0, LOWORD(lParam), dwSplitterPos - 1, 0);
		DeferWindowPos(hdwp, W2, nullptr, 0, dwSplitterPos + width, LOWORD(lParam), HIWORD(lParam) - dwSplitterPos - width, 0);
		if (hdwp) EndDeferWindowPos(hdwp);

	}
};//---------------------------------------------------------------



  //			ContSpliterProc <<<<<<<<<<<<<<<<<<<<<<<
ContSpliterProc::ContSpliterProc(HWND Item, HWND Ch1, HWND Ch2, bool hor, byte width) :ContSpliter(Item,  Ch1,  Ch2,  hor,  width)
{};//---------------------------------------------------------------

void ContSpliterProc::Move(HWND hwnd, WPARAM wParam, LPARAM lParam) {
	if ((horis ? LOWORD(lParam) : HIWORD(lParam)) > width * 2) {// do not allow above this mark
		SetCursor(hCur);
		if ((wParam == MK_LBUTTON) && bSplitterMoving)
		{
			RECT rect;
			GetClientRect(hwnd, &rect);
			if ((horis ? LOWORD(lParam) : HIWORD(lParam)) + width * 2 > (horis ? rect.right : rect.bottom))
				return;

			dwSplitterPos =  (horis ? LOWORD(lParam) : HIWORD(lParam));
			ContSpliter::Resize(hwnd, 1, MAKELPARAM(rect.right, rect.bottom));
			dwSplitterPos = dwSplitterPos * 100 / (horis ? rect.right : rect.bottom);
		}
	}
};//---------------------------------------------------------------

void ContSpliterProc::Resize(HWND hwnd, WPARAM wParam, LPARAM lParam) {
	if (horis) {
		int SplitterPos = dwSplitterPos * (DWORD)LOWORD(lParam) / 100;
		if ((wParam != 1) && (LOWORD(lParam) < SplitterPos))
			SplitterPos = LOWORD(lParam) - width * 2;

		/* Adjust the children's size and position */
		MoveWindow(W1, 0, 0, SplitterPos - 1, HIWORD(lParam), TRUE);
		MoveWindow(W2, SplitterPos + width, 0, LOWORD(lParam) - SplitterPos, HIWORD(lParam), TRUE);
	}
	else {
		int SplitterPos = dwSplitterPos * (DWORD)HIWORD(lParam) / 100;
		if ((wParam != 1) && (HIWORD(lParam) < SplitterPos))
			SplitterPos = HIWORD(lParam) - width * 2;

		/* Adjust the children's size and position */
		MoveWindow(W1, 0, 0, LOWORD(lParam), SplitterPos - 1, TRUE);
		MoveWindow(W2, 0, SplitterPos + width, LOWORD(lParam), HIWORD(lParam) - SplitterPos - width, TRUE);
	}
};//---------------------------------------------------------------

ContSpliter* ContSpliterProc::New(HWND Item, HWND Ch1, HWND Ch2, bool hor, byte width, byte Defproc) {
	ContSpliterProc* f = new ContSpliterProc(Item, Ch1, Ch2, hor, width);
	f->dwSplitterPos = Defproc;
	return f;
}; // ---------------------------------------------------------------


LRESULT CALLBACK ContSpliter::static_Procedure(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
	switch (uMsg) {
	case WM_SIZE: if(auto A = ContSpliter::GetObject(hwnd)) A->Resize(hwnd, wParam, lParam);
	break;
	case WM_MOUSEMOVE:
		reinterpret_cast<ContSpliter*>(GetWindowLong(hwnd, GWL_USERDATA))->Move(hwnd, wParam, lParam);
	break;
	case WM_LBUTTONDOWN: {
		ContSpliter* _this = ContSpliter::GetObject(hwnd);
		_this->bSplitterMoving = TRUE;
		SetCapture(hwnd);
	}
	break;
	case WM_LBUTTONUP: {
		ReleaseCapture();
		ContSpliter* _this = ContSpliter::GetObject(hwnd);
		_this->bSplitterMoving = FALSE;
	}
	break;
	case WM_DESTROY: {
		delete  ContSpliter::GetObject(hwnd);
	}
	case WM_COMMAND: SendMessage(GetParent(hwnd), WM_COMMAND, wParam, lParam);
	break;
	default: return DefWindowProc(hwnd, uMsg, wParam, lParam);
	}
	return 0;
}

#endif